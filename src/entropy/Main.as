package entropy {
	import flash.display.Bitmap;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.geom.Rectangle;
	import flash.net.FileReference;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.text.TextFormatAlign;
	import org.flintparticles.twoD.renderers.BitmapRenderer;
	import flash.geom.Point;
	import flash.display.BitmapData;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	
	
	//this project leverages the flint particle system, which can be found at http://flintparticles.org/
	//fl package of button components was provided through http://evolve.reintroducing.com/2007/10/30/tips-n-tricks/fl-package-swc/ by Matt Przybylski
	
	[Frame(factoryClass="entropy.Preloader")]
	public class Main extends Sprite {
		/**
		 * The default stage width, and the value that should be used as
		 * the stage width even when the window scales.
		 */
		public static const STAGE_WIDTH:int = 640;
		
		/**
		 * See STAGE_WIDTH.
		 */
		public static const STAGE_HEIGHT:int = 480;
		
		/**
		 * The renderer manages and renders the particle system.
		 */
		private var renderer:BitmapRenderer;

		private var player:Sprite;
		
		private var gauge:EnergyGauge;
		
		/**
		 * Currently the only emitter, because using multiple emitters
		 * would require registering the same collision data with each
		 * emitter.
		 */
		private var emitter:GasEmitter;
		
		private var grid:HexGrid;
		private var reader:LevelReader;
		private var title:titleScreen;
		private var resetButton:Sprite;
		
		[Embed(source = "../../lib/mixdown.mp3")]
		private var BGMusic:Class;
		private var bgMusic:Sound;
		
		public function Main() {
			//autogenerated
			//call init() once this has a reference to the stage
			if (stage) init();
			else addEventListener(Event.ADDED_TO_STAGE, init);
		}

		private function init(e:Event = null):void {
			//also autogenerated; the "entry point" is directly after this line
			removeEventListener(Event.ADDED_TO_STAGE, init);
			
			//set up the elements that will be reused
			emitter = new GasEmitter();
			renderer = new BitmapRenderer(new Rectangle(0, 0, STAGE_WIDTH, STAGE_HEIGHT));
			renderer.addEmitter(emitter);
			
			gauge = new EnergyGauge(100, 20, 100);
			gauge.x = 10;
			gauge.y = 10;
			
			resetButton = new Sprite();
			resetButton.buttonMode = true;
			resetButton.mouseChildren = false;
			resetButton.graphics.lineStyle(1, 0xDD0000);
			resetButton.graphics.beginFill(0xFF0000);
			resetButton.graphics.drawRoundRect(0, 0, 50, 20, 5);
			resetButton.graphics.endFill();
			var resetText:TextField = new TextField();
			resetText.defaultTextFormat = new TextFormat(null, 15, 0x000000, true, false, false, null, null, TextFormatAlign.CENTER);
			resetText.text = "Reset";
			resetText.width = resetButton.width;
			resetText.height = resetButton.height;
			resetButton.addChild(resetText);
			resetButton.x = STAGE_WIDTH - 5 - resetButton.width;
			resetButton.y = 5;
			resetButton.addEventListener(MouseEvent.CLICK, reset);
			
			//start music
			bgMusic = (new BGMusic) as Sound; 			     
			bgMusic.play(0,9999); 			     
			
			//draw a black rectangle behind the stage
			graphics.beginFill(0x000000);
			graphics.drawRect(0, 0, STAGE_WIDTH, STAGE_HEIGHT);
			graphics.endFill();
			
			initTitle();
		}
		
		private function reset(e:MouseEvent = null):void {
			if(title.fileLoaded) {
				initMap(title.reference);
			} else {
				initMap(null);
			}
		}
		
		private function initMap(file:FileReference = null):void {
			//reset everything
			gauge.energyLevel = 60;
			removeChildren();
			
			if(grid != null) {
				grid.cleanUp();
			}
			emitter.stop();
			
			//load the level
			if(file != null) {
				reader = new LevelReader(file);
				grid = new HexGrid(emitter, gauge, 25, 15, -1, reader.fileToVector(10, 5));
			} else {
				grid = new HexGrid(emitter, gauge, 25, 15);
			}
			
			player = new Player(grid, gauge);
			
			//add children in the order they should be drawn
			addChild(renderer);
			addChild(grid);
			addChild(gauge);
			addChild(player);
			addChild(resetButton);
		}
		
		private function initTitle():void
		{
			title = new titleScreen(new FileReference());
			stage.addEventListener(Event.COMPLETE, f_Loaded);
			stage.addEventListener(Event.CANCEL, f_random);//risky
			addChild(title);
		}
		
		private function f_Loaded(e:Event):void
		{
			removeChild(title);
			initMap(title.reference);
		}
		
		private function f_random(e:Event):void
		{
			removeChild(title);
			initMap();
		}
		
		
		
	}
}